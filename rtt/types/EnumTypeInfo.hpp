#include "../rtt-config.h"
#include "Types.hpp"
#include "TemplateTypeInfo.hpp"
#include "TemplateConstructor.hpp"

namespace RTT
{
    namespace types
    {

        /**
         * Type information for Enum types for which they are convertible
         * to int.
         *
         * @see StructTypeInfo
         */
        template<class T>
        struct EnumTypeInfo: public TemplateTypeInfo<T, false>
        {
        protected:
            static int enum_to_int(T e)
            {
                return (int) e;
            }

            static T int_to_enum(int i)
            {
                return (T) i;
            }

            std::map<T,string> to_string;
            typedef std::map<T,string> MapType;
        public:
            EnumTypeInfo(const char* type) :
                TemplateTypeInfo<T, false> (type)
            {
                if (!Types()->type("int")) {
                    log(Error) << "Failed to register enum<-> int conversion because type int is not known in type system."<<endlog();
                } else {
                    Types()->type("int")->addConstructor(newConstructor(
                            &EnumTypeInfo<T>::enum_to_int, true));
                }
                this->addConstructor( newConstructor( &EnumTypeInfo<T>::int_to_enum, true) );
            }

            /**
             * Composition also checks if source is an int or string, and if so, converts
             * it to the enum of type T kept in result.
             * @param source a DataSource<int> or DataSource<string>, generated by convertType().
             * @param result An AssignableDataSource<T> that will get the new enum value.
             */
            virtual bool composeType(base::DataSourceBase::shared_ptr source,
                    base::DataSourceBase::shared_ptr result) const
            {
                // First, try a plain update.
                if (result->update(source.get()))
                    return true;
                // try conversion from int to enum:
                internal::DataSource<int>::shared_ptr ds =
                        internal::DataSource<int>::narrow( source.get() );
                if (ds)
                {
                    typename internal::AssignableDataSource<T>::shared_ptr menum =
                            internal::AssignableDataSource<T>::narrow( source.get() );
                    assert(menum);
                    menum->set( (T)ds->get() );
                    return true;
                }
                // try conversion from string to enum:
                internal::DataSource<string>::shared_ptr dss =
                        internal::DataSource<string>::narrow( source.get() );
                if (dss)
                {
                    typename internal::AssignableDataSource<T>::shared_ptr menum =
                            internal::AssignableDataSource<T>::narrow( result.get() );
                    assert(menum);
                    for( typename MapType::const_iterator it = to_string.begin(); it != to_string.end(); ++it)
                        if ( it->second == dss->get() ) {
                            menum->set( it->first );
                            return true;
                        }
                }
                // no conversion possible.
                return false;
            }

            /**
             * Converts the enum to a string in case source is an enum and the string
             * mapping is known. In case there is no string mapping, an int is returned.
             * The conversion the other way around is done by composeType()
             * @return a new DataSource containing an int or a string, null if
             * source is not an enum of this type.
             */
            virtual base::DataSourceBase::shared_ptr convertType(base::DataSourceBase::shared_ptr source) const
            {
                // Convert enum to string
                typename DataSource<T>::shared_ptr ds = DataSource<T>::narrow( source.get() );
                if ( ds )
                {
                    // if not available, just convert to int.
                    if ( to_string.count( ds->get() ) == 0 ) {
                        log(Warning) << "No enum-to-string mapping defined for enum " << this->getTypeName() <<". Converting to int."<<endlog();
                        return new ValueDataSource<int>( ds->get() );
                    }
                    ValueDataSource<string>::shared_ptr vds =  new ValueDataSource<string>( to_string.find(ds->get())->second );
                    return vds;
                }
                // convert string to enum
                return base::DataSourceBase::shared_ptr();
            }
};
    }
}
